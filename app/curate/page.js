'use client';

import { useState, useEffect } from 'react';
import { processText, getCategories, getDatabaseStats } from '../../lib/api';
import { knowledgeAPI } from '../../lib/supabase';
import SidebarNavigation from '../../components/SidebarNavigation';

export default function CurateKnowledgePage() {
  const [inputText, setInputText] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [recommendations, setRecommendations] = useState(null);
  const [similarCategory, setSimilarCategory] = useState(null);
  const [categories, setCategories] = useState([]);
  const [stats, setStats] = useState(null);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  const [inputMode, setInputMode] = useState('upload'); // 'upload' or 'text'
  const [similarityThreshold, setSimilarityThreshold] = useState(0.8);

  // Load categories and stats on component mount
  useEffect(() => {
    loadCategories();
    loadStats();
  }, []);

  const loadCategories = async () => {
    try {
      // Get categories from Supabase instead of backend
      const data = await knowledgeAPI.getAll();
      const uniqueCategories = [...new Set(data.map(item => item.category))];
      setCategories(uniqueCategories.map(cat => ({ category: cat })));
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const loadStats = async () => {
    try {
      // Get stats from Supabase instead of backend
      const data = await knowledgeAPI.getAll();
      const uniqueTags = new Set();
      data.forEach(item => {
        if (item.tags) {
          item.tags.forEach(tag => uniqueTags.add(tag));
        }
      });
      
      setStats({
        total_knowledge_items: data.length,
        unique_tags: uniqueTags.size
      });
    } catch (error) {
      console.error('Failed to load stats:', error);
    }
  };

  const handleProcessText = async () => {
    if (!inputText.trim()) {
      setError('Please enter some text to process');
      return;
    }

    setIsProcessing(true);
    setError(null);
    setSuccessMessage('');
    
    try {
      // Still use backend for AI processing and recommendations
      const result = await processText(inputText, similarityThreshold);
      console.log('Backend response:', result); // Debug log
      setRecommendations(result.recommendations);
      setSimilarCategory(result.similar_category);
    } catch (error) {
      setError(`Processing failed: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleApplyRecommendation = async (recommendation) => {
    setIsProcessing(true);
    setError(null);
    
    try {
      console.log('🚀 Applying recommendation:', recommendation.category);
      console.log('📝 Content length:', recommendation.updated_text.length);
      console.log('🏷️ Tags:', recommendation.tags);
      
      // Use the tags directly from the recommendation (now generated by LLM)
      let tags = [];
      if (recommendation.tags && Array.isArray(recommendation.tags)) {
        tags = recommendation.tags;
      } else {
        // Fallback if tags are missing or malformed
        tags = ['knowledge'];
      }

      // Create knowledge item directly in Supabase
      const knowledgeItem = {
        category: recommendation.category,
        content: recommendation.updated_text || inputText,
        tags: tags  // Use the meaningful tags from LLM
      };

      console.log('⚡ Starting knowledge item creation (this will generate embedding)...');
      
      const result = await knowledgeAPI.create(knowledgeItem);
      
      console.log('✅ Knowledge item created successfully:', result.id);
      
      setSuccessMessage(`✅ Successfully created category: ${recommendation.category}`);
      
      // Refresh categories and stats
      await loadCategories();
      await loadStats();
      
      // Clear recommendations after successful application
      setRecommendations(null);
      setInputText('');
      
    } catch (error) {
      console.error('❌ Application failed:', error);
      setError(`Failed to apply recommendation: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDoNothing = () => {
    // Clear everything and return to input state
    setRecommendations(null);
    setSimilarCategory(null);
    setInputText('');
    setError(null);
    setSuccessMessage('📝 Input discarded. Ready for new knowledge.');
    
    // Clear success message after 3 seconds
    setTimeout(() => {
      setSuccessMessage('');
    }, 3000);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleProcessText();
    }
  };

  return (
    <div className="flex h-screen bg-main-bg">
      {/* Sidebar Navigation */}
      <SidebarNavigation currentPage="curate" stats={stats} />

      {/* Main Content Area */}
      <div className="flex-1 p-6">
        {/* Input Mode Toggle */}
        <div className="mb-4 flex gap-2">
          <button
            onClick={() => setInputMode('upload')}
            className={`px-4 py-2 rounded text-sm ${
              inputMode === 'upload' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
            }`}
          >
            📄 Upload File
          </button>
          <button
            onClick={() => setInputMode('text')}
            className={`px-4 py-2 rounded text-sm ${
              inputMode === 'text' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
            }`}
          >
            ✏️ Enter Text
          </button>
        </div>

        {/* Upload Area or Text Input */}
        {inputMode === 'upload' ? (
          <div className="bg-card-bg rounded-lg p-8 mb-6 text-center border-2 border-dashed border-gray-400">
            <div className="text-gray-300 mb-2 text-4xl">📄</div>
            <p className="text-gray-300 mb-4">Add a file or document</p>
            <p className="text-gray-400 text-sm">
              Or <button 
                onClick={() => setInputMode('text')}
                className="text-blue-400 hover:underline"
              >
                enter text manually
              </button>
            </p>
          </div>
        ) : (
          <div className="bg-card-bg rounded-lg p-6 mb-6">
            <h3 className="text-white text-lg font-semibold mb-4">💡 Enter Your Knowledge</h3>
            <textarea 
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Enter your knowledge, insights, or information here..."
              className="w-full h-32 p-3 bg-gray-700 text-white rounded border border-gray-600 focus:border-blue-400 focus:outline-none resize-none"
              disabled={isProcessing}
            />
            <div className="flex justify-between items-center mt-4">
              <div className="flex items-center gap-4">
                <div className="text-sm text-gray-400">
                  Press Enter to process, Shift+Enter for new line
                </div>
                <div className="flex items-center gap-2">
                  <label className="text-sm text-gray-400">Similarity:</label>
                  <input
                    type="range"
                    min="0.5"
                    max="0.95"
                    step="0.05"
                    value={similarityThreshold}
                    onChange={(e) => setSimilarityThreshold(parseFloat(e.target.value))}
                    className="w-20"
                  />
                  <span className="text-sm text-gray-300 w-12">{(similarityThreshold * 100).toFixed(0)}%</span>
                </div>
              </div>
              <button
                onClick={handleProcessText}
                disabled={isProcessing || !inputText.trim()}
                className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed"
              >
                {isProcessing ? '🔄 Processing...' : '🚀 Process'}
              </button>
            </div>
          </div>
        )}

        {/* Error Message */}
        {error && (
          <div className="bg-red-600 text-white p-4 rounded-lg mb-6">
            ❌ {error}
          </div>
        )}

        {/* Success Message */}
        {successMessage && (
          <div className="bg-green-600 text-white p-4 rounded-lg mb-6">
            {successMessage}
          </div>
        )}

        {/* Summary & Analysis Card */}
        {recommendations && (
          <div className="bg-white rounded-lg p-6 mb-6">
            <div className="border-l-4 border-accent pl-4 mb-4">
              <h2 className="text-lg font-semibold text-gray-800">Summary & Analysis:</h2>
            </div>

            {/* Context Section */}
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-600 mb-2 flex items-center gap-2">
                📊 CONTEXT:
              </h3>
              <p className="text-gray-700 text-sm leading-relaxed">
                {inputText.substring(0, 500)}...
              </p>
            </div>

            {/* Similar Category Info */}
            {similarCategory && (
              <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                <h3 className="text-sm font-semibold text-blue-800 mb-2">
                  📊 Similar Content Found:
                </h3>
                <p className="text-blue-700 text-sm">
                  Found similar content in category: <strong>{similarCategory}</strong>
                </p>
              </div>
            )}

            {/* Suggestions Section */}
            <div className="mb-6">
              <h3 className="text-sm font-semibold text-gray-600 mb-2">
                💡 SUGGESTIONS:
              </h3>
              <p className="text-gray-700 text-sm mb-3">
                Reviewing your existing knowledge database, here are four options for handling this information:
              </p>
              <ul className="text-gray-700 text-sm space-y-3 ml-4">
                {recommendations.map((rec) => (
                  <li key={rec.option_number} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                    <div className="flex items-start gap-3">
                      <span className="font-semibold text-blue-600">Option {rec.option_number}:</span>
                      <div className="flex-1">
                        <div className="mb-2">
                          <span className="font-medium text-gray-800">{rec.category}</span>
                        </div>
                        <div className="text-gray-600 text-sm mb-3">
                          {rec.change}
                        </div>
                        
                        {/* Show tags if they exist */}
                        {rec.tags && rec.tags.length > 0 && (
                          <div className="mb-3">
                            <span className="text-xs font-medium text-gray-500 mb-1 block">Tags:</span>
                            <div className="flex flex-wrap gap-1">
                              {rec.tags.map((tag, tagIndex) => (
                                <span 
                                  key={tagIndex} 
                                  className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-medium"
                                >
                                  {tag}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        <div className="text-xs text-gray-500 mb-3 bg-white p-2 rounded border">
                          <strong>Preview:</strong> {rec.preview || (rec.updated_text ? rec.updated_text.substring(0, 100) + '...' : 'No preview available')}
                        </div>
                        
                        <button
                          onClick={() => handleApplyRecommendation(rec)}
                          disabled={isProcessing}
                          className="px-4 py-2 bg-green-600 text-white text-sm rounded hover:bg-green-700 disabled:bg-gray-400 transition-colors"
                        >
                          {isProcessing ? '⏳ Applying...' : '✅ Apply This Option'}
                        </button>
                      </div>
                    </div>
                  </li>
                ))}
                
                {/* Option 4: Do Nothing */}
                <li className="border border-gray-300 rounded-lg p-4 bg-gray-100">
                  <div className="flex items-start gap-3">
                    <span className="font-semibold text-gray-600">Option 4:</span>
                    <div className="flex-1">
                      <div className="mb-2">
                        <span className="font-medium text-gray-800">Do Nothing</span>
                      </div>
                      <div className="text-gray-600 text-sm mb-3">
                        Discard this input and return to the main interface. This information will not be saved to your knowledge database.
                      </div>
                      
                      <div className="mb-3">
                        <span className="text-xs font-medium text-gray-500 mb-1 block">Tags:</span>
                        <div className="flex flex-wrap gap-1">
                          <span className="bg-gray-200 text-gray-600 px-2 py-1 rounded text-xs font-medium">
                            discarded
                          </span>
                          <span className="bg-gray-200 text-gray-600 px-2 py-1 rounded text-xs font-medium">
                            no-action
                          </span>
                        </div>
                      </div>
                      
                      <div className="text-xs text-gray-500 mb-3 bg-white p-2 rounded border">
                        <strong>Action:</strong> Clear current input and return to main interface without saving anything.
                      </div>
                      
                      <button
                        onClick={handleDoNothing}
                        disabled={isProcessing}
                        className="px-4 py-2 bg-gray-500 text-white text-sm rounded hover:bg-gray-600 disabled:bg-gray-400 transition-colors"
                      >
                        🗑️ Discard Input
                      </button>
                    </div>
                  </div>
                </li>
              </ul>
            </div>

            {/* Recommendation Section */}
            <div>
              <h3 className="text-sm font-semibold text-gray-600 mb-2 flex items-center gap-2">
                💡 RECOMMENDATION:
              </h3>
              <p className="text-gray-700 text-sm">
                Based on your knowledge database, I recommend choosing the option that best fits your current learning goals and organizational structure.
              </p>
            </div>
          </div>
        )}

        {/* Chat Input */}
        <div className="bg-gray-600 rounded-lg p-4">
          <div className="flex items-center gap-3">
            <input 
              type="text" 
              placeholder="Ask anything about your knowledge base..." 
              className="flex-1 bg-transparent text-white placeholder-gray-300 border-none outline-none"
            />
            <div className="flex items-center gap-2 text-gray-300 text-sm">
              <span>🧠 Second Brain AI</span>
              <button className="w-8 h-8 bg-gray-500 rounded-full flex items-center justify-center text-white hover:bg-gray-400">
                ↗️
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}